# Copyright 2015 Jared Rodriguez (jared at blacknode dot net)
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

"""\
Functions for grabbing a MercuryID

MercuryID or mercury_id meta and hash value


[meta] - 00 = hash generated by interface mac addresses
         01 = hash generated by asset tag and serial number
"""
import hashlib
import logging

from mercury.common.exceptions import MercuryIdException

LOG = logging.getLogger(__name__)

META_TYPE_MAC = '00'
META_TYPE_ASSET_SERIAL = '01'


def _build_hash(target, meta_type):
    digest = hashlib.sha1(target).hexdigest()
    return meta_type + digest


def get_embedded(inspected_interfaces):
    embedded_interfaces = []
    for interface in inspected_interfaces:
        _biosdevname = interface['predictable_names'].get('biosdevname', '')
        if _biosdevname:
            if 'em' in _biosdevname:
                embedded_interfaces.append(interface)
    return embedded_interfaces


def generate_mercury_id(inspected_dmi, inspected_interfaces):
    asset_tag = inspected_dmi.get('chassis_asset_tag', '')
    serial_number = inspected_dmi.get('chassis_serial', '')

    if asset_tag or serial_number:
        target = asset_tag + serial_number
        meta_type = META_TYPE_ASSET_SERIAL
        LOG.debug('Generating mercury ID using asset information: tag=%s, asset=%s' % (asset_tag, serial_number))
    else:
        meta_type = META_TYPE_MAC
        embedded = get_embedded(inspected_interfaces)
        if embedded:
            LOG.debug('Generating mercury ID using embedded interfaces ')
            inspected_interfaces = embedded
        else:
            LOG.debug('Generating mercury ID using all interfaces')

        target = ''
        for interface in inspected_interfaces:
            address = interface.get('address')  # mac address
            if address:
                target += address

    if not target:
        raise MercuryIdException('Could not generate MercuryId')

    return _build_hash(target, meta_type)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    from mercury.inspector import dmi_inspector
    from mercury.inspector.inspectors.interfaces import interface_inspector

    _dmi = dmi_inspector()
    _interfaces = interface_inspector()

    print generate_mercury_id(_dmi, _interfaces)
